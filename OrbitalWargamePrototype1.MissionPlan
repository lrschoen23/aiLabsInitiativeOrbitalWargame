<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<FreeFlyerProjectFile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" timePrecisionMode="nanosecond" schemaVersion="7.8.0.1">
  <ProjectInformation>
    <Author />
    <Source />
    <FreeFlyerVersion>7.8.1.50021</FreeFlyerVersion>
    <RevisionNumber />
    <Title />
    <Subject />
    <Category />
    <Keywords />
    <Comments />
    <Notes />
  </ProjectInformation>
  <ProjectPreferences>
    <General>
      <LockProjectFromEditing>false</LockProjectFromEditing>
    </General>
    <OnOpen>
      <ShowControlSequence>true</ShowControlSequence>
      <ShowEmptyEnvironment>false</ShowEmptyEnvironment>
      <ShowNotes>false</ShowNotes>
      <ShowHome>false</ShowHome>
      <ShowOutput>false</ShowOutput>
      <CreateBackup>false</CreateBackup>
      <BackupLocation></BackupLocation>
    </OnOpen>
    <OnRun>
      <SaveMissionPlan>false</SaveMissionPlan>
      <HideWarningMessages>false</HideWarningMessages>
    </OnRun>
  </ProjectPreferences>
  <ProjectDataFiles>
    <EarthOrientationFile useDefault="true"></EarthOrientationFile>
    <ElectronDensityCoefficientFile useDefault="true"></ElectronDensityCoefficientFile>
    <GeopotentialFile useDefault="true"></GeopotentialFile>
    <HarrisPriesterDragFile useDefault="true"></HarrisPriesterDragFile>
    <JacchiaAtmosphereModelFile useDefault="true"></JacchiaAtmosphereModelFile>
    <LeapSecondFile useDefault="true"></LeapSecondFile>
    <MagneticFieldFile useDefault="true"></MagneticFieldFile>
    <PlanetaryFile useDefault="true"></PlanetaryFile>
    <StationGeodeticsFile useDefault="true"></StationGeodeticsFile>
    <SolidTideFile useDefault="true"></SolidTideFile>
    <DSTFile useDefault="true"></DSTFile>
    <StarFieldFile useDefault="true"></StarFieldFile>
  </ProjectDataFiles>
  <ProjectObjects>
    <Object>
      <SolarSystem name="FF_SolarSystem" isConstant="false" isGlobal="true">
        <Name>FF_SolarSystem</Name>
        <ComputePolarMotion>true</ComputePolarMotion>
        <ApplyUT1Correction>true</ApplyUT1Correction>
        <COUpdateInterval units="s" displayed_units="s">0</COUpdateInterval>
        <NPUpdateInterval units="s" displayed_units="s">1800</NPUpdateInterval>
        <IonosphereOptions>
          <IonosphereOptions name="FF_SolarSystem_|ionoOptions|" isConstant="false" isGlobal="true">
            <Name>FF_SolarSystem_|ionoOptions|</Name>
            <MaximumHeight units="km" displayed_units="km">1000</MaximumHeight>
            <MinimumHeight units="km" displayed_units="km">80</MinimumHeight>
            <IntegrationStepSize units="km" displayed_units="km">25</IntegrationStepSize>
            <ScaleFactor units="" displayed_units="">1</ScaleFactor>
            <Model>0</Model>
            <metadata dim="0" />
          </IonosphereOptions>
        </IonosphereOptions>
        <NoradKeplerEqTolerance units="" displayed_units="">1e-12</NoradKeplerEqTolerance>
        <metadata dim="0" />
      </SolarSystem>
    </Object>
    <Object>
      <ConsoleWindow name="Console" isConstant="false" isGlobal="true">
        <Name>Console</Name>
        <WindowTitle>Console</WindowTitle>
        <WordWrap>false</WordWrap>
        <CurrentTextColor>0</CurrentTextColor>
        <BackColor>16777215</BackColor>
        <Dimension units="" displayed_units="">10</Dimension>
        <DockMode>1</DockMode>
        <CurrentFontType>0</CurrentFontType>
        <UseStdOut>false</UseStdOut>
        <ShowOnRun>false</ShowOnRun>
        <metadata dim="0" />
      </ConsoleWindow>
    </Object>
  </ProjectObjects>
  <ProjectMissionSequence>
    <ProjectExternals>
      <ProjectExternal included="true" autosave="true" contentType="FreeFlyerScript">.\PlotUtilities.FFProcedure</ProjectExternal>
    </ProjectExternals>
    <ProjectCommands>
      <FreeForm enabled="true">
        <Label>FreeForm</Label>
        <Bookmarks />
        <Breakpoints />
        <FreeFormScript><![CDATA[
// Define Procedure ComputeAheadTrack

Define Procedure ComputeAheadTrack(Spacecraft primarySC, Spacecraft secondarySC, TimeSpan predictionDuration, GraphicsOverlay go, Variable justEraseOverlay);

	// This Procedure populates a GraphicsOverlay with an "ahead track" that visualizes where the secondary Spacecraft
	// will travel with respect to the primary Spacecraft. This Procedure uses the RelativeMotionUtilities.ComputeStateHCW
	// method to efficiently compute where the secondary will be using the HCW equations of motion.
	
	Variable i;
	
	Array futureStatePrimaryBodyFixed[3];
	
	Matrix futureStateMJ2000 = Matrix.Empty;
	futureStateMJ2000.ColumnCount = 3;
	
	TimeSpan currentStep = TimeSpan.Zero();
	
	// Reset the GraphicsOverlay
	go.ClearOverlayElements();
	
	If (justEraseOverlay);
		ExitProcedure;
	End;
	
	Save primarySC;
	Save secondarySC;
	primarySC.Propagator.StepSize = TimeSpan.FromSeconds(300);
	
//	// Compute the future path of the secondary with respect to the primary using the HCW equations of motion
//	While (currentStep < predictionDuration);
//		
//		currentStep += primarySC.Propagator.StepSize;
//		
//		futureStateMJ2000.RowCount += 1;
//		futureStateMJ2000.ColumnCount = 3;
//		
//		futureStateMJ2000[futureStateMJ2000.RowCount-1, :] = [RelativeMotionUtilities.ComputeStateHCW(secondarySC, primarySC, currentStep, 0)[0:2]];
//		
//	End;
//	
//	// Add points to the GraphicsOverlay in the primary Spacecraft's body fixed frame
//	For i = 0 to futureStateMJ2000.RowCount-1;
//		
//		Step primarySC;
//		
//		futureStatePrimaryBodyFixed = AttitudeConvert(0, 3, primarySC, futureStateMJ2000[i,:].ToArrayRowMajor());
//		
//		go.AddOverlayElement(futureStatePrimaryBodyFixed[0], futureStatePrimaryBodyFixed[1], futureStatePrimaryBodyFixed[2]);
//		
//	End;
	
	// Compute the future path of the secondary with respect to the primary using the HCW equations of motion
	TimeSpan epochToStepTo = primarySC.Epoch + predictionDuration;
	WhileStepping primarySC to (primarySC.Epoch == epochToStepTo);
		secondarySC.StepToEpoch(primarySC.Epoch);
		
		futureStatePrimaryBodyFixed = AttitudeConvert(0, 3, primarySC, secondarySC.Position - primarySC.Position);
		
		go.AddOverlayElement(futureStatePrimaryBodyFixed[0], futureStatePrimaryBodyFixed[1], futureStatePrimaryBodyFixed[2]);
		
	End;

	
	Restore primarySC;
	Restore secondarySC;
	
EndProcedure;]]></FreeFormScript>
      </FreeForm>
      <FreeForm enabled="true">
        <Label>Stuff</Label>
        <Bookmarks />
        <Breakpoints />
        <FreeFormScript><![CDATA[
Global TimeSpan simStepSize = TimeSpan.FromSeconds(300);

Global Variable colorRed1 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.5);
Global Variable colorRed2 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.75);
Global Variable colorRed3 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.25);
Global Variable colorRed4 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.1);
Global Variable colorBlue1 = ColorTools.DodgerBlue;

Global Variable radialViewTailLength = 3e2 * 300 / simStepSize.ToSeconds();

Global Variable doOptimizationAndSaveValues = 0;

Formation red;
Formation blue;

red.Count = 3;
blue.Count = 1;

red.ViewAsGroup = 0;
blue.ViewAsGroup = 0;


Global GraphicsOverlay overlayRed1Future;
overlayRed1Future.SetReferenceObject(blue[0].ObjectId);
overlayRed1Future.DefaultColor = ColorTools.LightGray;

Global GraphicsOverlay overlayRed2Future;
overlayRed2Future.SetReferenceObject(blue[0].ObjectId);
overlayRed2Future.DefaultColor = ColorTools.LightGray;

Global GraphicsOverlay overlayRed3Future;
overlayRed3Future.SetReferenceObject(blue[0].ObjectId);
overlayRed3Future.DefaultColor = ColorTools.LightGray;

Global TimeSpan aheadPredictTime = TimeSpan.FromHours(12);
Global TimeSpan aheadPredictUpdateInterval = TimeSpan.FromSeconds(300);
Global Constant Variable aheadPredictRangeUpdateLimit = 300;


Global ViewWindow radialView;
radialView.CurrentViewpoint.ThreeDView.Radius = 2147.54485002776;
radialView.CurrentViewpoint.ThreeDView.RightAscension = 270;
radialView.CurrentViewpoint.ThreeDView.Declination = 0;
radialView.AddObject(red);
radialView.AddObject(blue);
radialView.AddObject(overlayRed1Future);
radialView.AddObject(overlayRed2Future);
radialView.AddObject(overlayRed3Future);
radialView.CurrentViewpoint.ThreeDView.Source = blue[0].ObjectId;
radialView.CurrentViewpoint.ThreeDView.Target = blue[0].ObjectId;

Global TimeSpan simStartEpoch = TimeTools.ParseCalendarDate("Jun 09 2025 15:00:00.000", "TAI", "TAI", "MJD GSFC");

Global ImpulsiveBurn burn;
burn.AttitudeSystem = 6;


Global FileInterface file;


Define Procedure OpenForRead(String filename);
	file.Filename = filename;
	file.ReadMode = 1;
	file.WriteMode = 0;
	file.Open();
EndProcedure;

Define Procedure OpenForWrite(String filename);
	file.Filename = filename;
	file.ReadMode = 0;
	file.WriteMode = 1;
	file.Open();
EndProcedure;

Global ViewFont vf;
vf.Size = 14;

// Set initial states
Variable baseRAAN = 40;
Variable baseI = 0.5;
blue[0].SetKeplerianState({42164,
                           1e-6,
                           baseI,
                           baseRAAN,
                           1,
                           1});
                           
blue[0].Epoch = simStartEpoch;
blue[0].Color = colorBlue1;
blue[0].BodyScale = 1000;
blue[0].DisplayName = "BlueSat";
blue[0].Propagator.StepSize = simStepSize;
blue[0].EulerAngles[1] = 90;
blue[0].TailLength = radialViewTailLength;
radialView.SetShowName(blue[0].ObjectId, 1);
radialView.SetObjectLabelFont(blue[0].ObjectId, vf);


Variable red1AngularSeparation = 2;
Variable red2AngularSeparation = 2.5;
Variable red2and3RadialSeparation = 60;
red[0].SetKeplerianState({42164,
                          1e-6,
                          baseI * 1.2,
                          baseRAAN - red1AngularSeparation,
                          1,
                          1});
red[1].SetKeplerianState({42164 - red2and3RadialSeparation,
                          1e-6,
                          baseI * 0.3,
                          baseRAAN - red2AngularSeparation * 1.7,
                          1,
                          1});
red[2].SetKeplerianState({42164 + red2and3RadialSeparation,
                          1e-6,
                          baseI * 0.3,
                          baseRAAN + red2AngularSeparation,
                          1,
                          1});
                          
red[0].Color = colorRed1;
red[1].Color = colorRed2;
red[2].Color = colorRed3;

Variable i;
For i = 0 to red.Count - 1;
	red[i].Epoch = simStartEpoch;
	red[i].BodyScale = 1000;
	red[i].DisplayName = "Red" + (i+1).ToString();
	red[i].TailLength = radialViewTailLength;
	radialView.SetShowName(red[i].ObjectId, 1);
	radialView.SetObjectLabelFont(red[i].ObjectId, vf);
End;


Global Array initialKepStateRed1 = red[0].GetKeplerianState();



Global Variable rangeB1_R1;
Global Variable rangeB1_R2;
Global Variable rangeB1_R3;
Global TimeSpan simEpoch;

Global PlotWindow pwRange({simEpoch, rangeB1_R1, rangeB1_R2, rangeB1_R3});
pwRange.SetBackgroundColorPalette("DarkGray");
pwRange.PlotTitle.Text = "Range to BlueSat";
pwRange.PlotSubTitle.Visible = 0;
pwRange.PointsToUpdate = 5 * 300 / simStepSize.ToSeconds();
pwRange.MaxPoints = 1e3 * 300 / simStepSize.ToSeconds();
pwRange.YAxis.MaximumValue = 1000;
pwRange.YAxis.MinimumValue = 0;
pwRange.YAxis.Title.Text = "Range";

pwRange.Series[0].Label = "Red1";
pwRange.Series[1].Label = "Red2";
pwRange.Series[2].Label = "Red3";

pwRange.Series[0].LineColor = colorRed1;
pwRange.Series[1].LineColor = colorRed2;
pwRange.Series[2].LineColor = colorRed3;

pwRange.Series[0].LineStyle = 0;
pwRange.Series[1].LineStyle = 0;
pwRange.Series[2].LineStyle = 0;

pwRange.Series[0].LineWidth = 2;
pwRange.Series[1].LineWidth = 2;
pwRange.Series[2].LineWidth = 2;


Global PlotScatterSeries radiusLongitudeB1;
Global PlotScatterSeries radiusLongitudeR1;
Global PlotScatterSeries radiusLongitudeR2;
Global PlotScatterSeries radiusLongitudeR3;

radiusLongitudeB1.Label = "BlueSat";
radiusLongitudeR1.Label = "Red1";
radiusLongitudeR2.Label = "Red2";
radiusLongitudeR3.Label = "Red3";

radiusLongitudeB1.LineColor = colorBlue1;
radiusLongitudeR1.LineColor = colorRed1;
radiusLongitudeR2.LineColor = colorRed2;
radiusLongitudeR3.LineColor = colorRed3;


Global PlotWindow pwRadiusLongitude;
pwRadiusLongitude.SetBackgroundColorPalette("DarkGray");
pwRadiusLongitude.PlotTitle.Text = "Longitude vs Radius";
pwRadiusLongitude.PlotSubTitle.Visible = 0;
pwRadiusLongitude.PointsToUpdate = 5 * 300 / simStepSize.ToSeconds();
pwRadiusLongitude.MaxPoints = 1e3 * 300 / simStepSize.ToSeconds();
pwRadiusLongitude.AddSeries(radiusLongitudeB1);
pwRadiusLongitude.AddSeries(radiusLongitudeR1);
pwRadiusLongitude.AddSeries(radiusLongitudeR2);
pwRadiusLongitude.AddSeries(radiusLongitudeR3);
pwRadiusLongitude.XAxis.MaximumValue = blue[0].Longitude + 3;
pwRadiusLongitude.XAxis.MinimumValue = blue[0].Longitude - 3;
pwRadiusLongitude.XAxis.Title.Text = "Longitude";
pwRadiusLongitude.YAxis.MaximumValue = 42250;
pwRadiusLongitude.YAxis.MinimumValue = 42050;
pwRadiusLongitude.YAxis.Title.Text = "Radius";

radiusLongitudeB1.LineStyle = 0;
radiusLongitudeR1.LineStyle = 0;
radiusLongitudeR2.LineStyle = 0;
radiusLongitudeR3.LineStyle = 0;

radiusLongitudeB1.LineWidth = 2;
radiusLongitudeR1.LineWidth = 2;
radiusLongitudeR2.LineWidth = 2;
radiusLongitudeR3.LineWidth = 2;

Call AddVerticalLine(
	pwRadiusLongitude,
	pwRadiusLongitude.XAxis.MinimumValue + (pwRadiusLongitude.XAxis.MaximumValue - pwRadiusLongitude.XAxis.MinimumValue) * 0.88,
	{pwRadiusLongitude.YAxis.MinimumValue + (pwRadiusLongitude.YAxis.MaximumValue - pwRadiusLongitude.YAxis.MinimumValue) * 0.17, pwRadiusLongitude.YAxis.MinimumValue},
	2,
	ColorTools.Green,
	0,
	"");
Call AddFloatingLabelToPlot(
	pwRadiusLongitude,
	pwRadiusLongitude.XAxis.MinimumValue + (pwRadiusLongitude.XAxis.MaximumValue - pwRadiusLongitude.XAxis.MinimumValue) * 0.88,
	pwRadiusLongitude.YAxis.MinimumValue + (pwRadiusLongitude.YAxis.MaximumValue - pwRadiusLongitude.YAxis.MinimumValue) * 0.15,
	ColorTools.Green,
	ColorTools.LightGray,
	"Candara",
	16,
	"To Earth");
Call AddSinglePointToPlot(
	pwRadiusLongitude,
	pwRadiusLongitude.XAxis.MinimumValue + (pwRadiusLongitude.XAxis.MaximumValue - pwRadiusLongitude.XAxis.MinimumValue) * 0.88,
	pwRadiusLongitude.YAxis.MinimumValue + 3,
	5,
	3,
	ColorTools.Green,
	"");






OutputLayout.SetWindowFrameVisibility({radialView.ID, pwRadiusLongitude.ID, pwRange.ID}, 0);
OutputLayout.SetWindowPosition(pwRadiusLongitude.ID, 1, 0, 1, 0);
OutputLayout.SetWindowSize(pwRadiusLongitude.ID, 1, 0.4, 1, 0.5);
OutputLayout.SetWindowPosition(pwRange.ID, 1, 0, 1, 0.5);
OutputLayout.SetWindowSize(pwRange.ID, 1, 0.4, 1, 0.5);
OutputLayout.SetWindowPosition(radialView.ID, 1, 0.4, 1, 0);
OutputLayout.SetWindowSize(radialView.ID, 1, 0.6, 1, 1);
OutputLayout.ApplyUpdates();


Define Procedure AdvanceSimToFutureEpoch(Formation red, Formation blue, TimeSpan futureEpoch);
	TimeSpan timeSinceAheadPredictUpdate = TimeSpan.Zero();
	
	WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
		red.StepToEpoch(blue[0].Epoch);
		simEpoch = blue[0].Epoch;
	
		rangeB1_R1 = blue[0].Range(red[0]);
		rangeB1_R2 = blue[0].Range(red[1]);
		rangeB1_R3 = blue[0].Range(red[2]);
		pwRange.Update();
		
		radiusLongitudeB1.AddPoints(blue[0].Longitude, blue[0].Radius);
		radiusLongitudeR1.AddPoints(red[0].Longitude, red[0].Radius);
		radiusLongitudeR2.AddPoints(red[1].Longitude, red[1].Radius);
		radiusLongitudeR3.AddPoints(red[2].Longitude, red[2].Radius);
		pwRadiusLongitude.Update();
		
		timeSinceAheadPredictUpdate += blue[0].Propagator.StepSize;
		If (timeSinceAheadPredictUpdate > aheadPredictUpdateInterval);
			Call ComputeAheadTrack(blue[0], red[0], aheadPredictTime, overlayRed1Future, rangeB1_R1 > aheadPredictRangeUpdateLimit);
			Call ComputeAheadTrack(blue[0], red[1], aheadPredictTime, overlayRed2Future, rangeB1_R2 > aheadPredictRangeUpdateLimit);
			Call ComputeAheadTrack(blue[0], red[2], aheadPredictTime, overlayRed3Future, rangeB1_R3 > aheadPredictRangeUpdateLimit);
			timeSinceAheadPredictUpdate = TimeSpan.Zero;
		End;
		
		
		radialView.Update();
	End;
EndProcedure;


Define Procedure BenignScript(Formation red, Formation blue);
	
	TimeSpan futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
EndProcedure;


Define Procedure ObservationScript(Formation red, Formation blue);
	
	TimeSpan futureEpoch = blue[0].Epoch + TimeSpan.FromDays(1);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	
	burn.BurnDirection = {    0.000145506,       -0.000805460,       -0.000000254};

//Block PRESOLVED OPTIMIZATION
//	Array relativePos;
//	Array desiredRelativePosLVC = {0, 20, 0};
//	Optimizer opt;
//	opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
//	opt.AddConstraintBlock(3, "relativePos", 0, 0);
//	
//	opt.SaveObjectToProcess(red[0]);
//	opt.SaveObjectToProcess(blue[0]);
//	
//	opt.LoadEngine();
//	While (opt.IsRunning());
//		opt.UpdateStateVariables();
//		opt.RestoreObjectsInProcess();
//		burn.BurnDirection = opt.GetStateVariableValues();
//		
//		red[0].Maneuver(burn);
//		
//		futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
//		WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
//			red[0].StepToEpoch(blue[0].Epoch);
//		End;
//		
//		relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//		relativePos[2] = desiredRelativePosLVC[2]; // we don't care about cross track so zero it out
//		opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
//		
//		opt.Minimize(burn.BurnDirection.Norm);
//		
//		If (opt.OptimizationPhase == 1);
//			Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
//		End;
//	End;
//	
//	Report opt.ReturnString;
//	opt.RestoreObjectsInProcess();
//	
//	burn.BurnDirection = opt.GetBestStateVariableValues();
//	Report burn.BurnDirection;
//EndBlock PRESOLVED OPTIMIZATION

	red[0].Maneuver(burn);

	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	
	burn.BurnDirection = {   -0.000636279,        0.000803921,        0.000397281};

//Block PRESOLVED OPTIMIZATION
//	Array relativePos;
//	Array desiredRelativePosLVC = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//	Variable relativeStateObjective;
//	Optimizer opt;
//	opt.MaximumNominalEvaluationCount = 800;
//	opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
//	
//	opt.SaveObjectToProcess(red[0]);
//	opt.SaveObjectToProcess(blue[0]);
//	
//	NloptOptions nlopt;
//	nlopt.AlgorithmToUse = 38;
//	nlopt.SubsidiaryAlgorithmToUse = 40;
//	
//	opt.LoadEngine(nlopt);
//	While (opt.IsRunning());
//		opt.UpdateStateVariables();
//		opt.RestoreObjectsInProcess();
//		burn.BurnDirection = opt.GetStateVariableValues();
//		
//		red[0].Maneuver(burn);
//		
//		futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
//		WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
//			red[0].StepToEpoch(blue[0].Epoch);
//		End;
//		
//		relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//		relativeStateObjective = (-desiredRelativePosLVC - relativePos).Norm;
//		
//		futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
//		WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
//			red[0].StepToEpoch(blue[0].Epoch);
//		End;
//		
//		relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//		relativeStateObjective += (desiredRelativePosLVC - relativePos).Norm;
//		
//		opt.Minimize(burn.BurnDirection.Norm * 1e3 + relativeStateObjective*1e0);
//		
//		If (opt.OptimizationPhase == 1);
//			Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
//		End;
//	End;
//	
//	Report opt.ReturnString;
//	opt.RestoreObjectsInProcess();
//	
//	burn.BurnDirection = opt.GetBestStateVariableValues();
//	Report burn.BurnDirection;
//EndBlock PRESOLVED OPTIMIZATION
	
	red[0].Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(1);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	burn.BurnDirection = -{    0.000145506,       -0.000805460,       -0.000000254};
	red[0].Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
EndProcedure;


Define Procedure DisableScript(Formation red, Formation blue);
	
	Array relativePos;
	Array desiredRelativePosLVC;
	Optimizer opt;
	Variable relativeStateObjective;
	NloptOptions nlopt;
	Array kepState;
	Variable totalDV;
	
	TimeSpan futureEpoch = blue[0].Epoch + TimeSpan.FromDays(1);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = {0, 4, 0};
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		opt.AddConstraintBlock(3, "relativePos", 0, 0);
		
		opt.SaveObjectToProcess(red[0]);
		opt.SaveObjectToProcess(blue[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			red[0].Maneuver(burn);
			
			futureEpoch = blue[0].Epoch + TimeSpan.FromDays(4);
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				red[0].StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
			relativePos[2] = desiredRelativePosLVC[2]; // we don't care about cross track so zero it out
			opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
			
			opt.Minimize(burn.BurnDirection.Norm);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn1.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION

	Call OpenForRead("SavedValues/DisableScript_Red1Burn1.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();

	red[0].Maneuver(burn);

	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(4);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);

//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
		
		opt.Reset(1);
		opt.MaximumNominalEvaluationCount = 800;
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		
		opt.SaveObjectToProcess(red[0]);
		opt.SaveObjectToProcess(blue[0]);
		
		nlopt.AlgorithmToUse = 38;
		nlopt.SubsidiaryAlgorithmToUse = 40;
		
		opt.LoadEngine(nlopt);
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			red[0].Maneuver(burn);
			
			futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				red[0].StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
			relativeStateObjective = (-desiredRelativePosLVC - relativePos).Norm;
			
			futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				red[0].StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
			relativeStateObjective += (desiredRelativePosLVC - relativePos).Norm;
			
			opt.Minimize(burn.BurnDirection.Norm * 1e3 + relativeStateObjective*1e0);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn2.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;

//EndBlock PRESOLVED OPTIMIZATION

	Call OpenForRead("SavedValues/DisableScript_Red1Burn2.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();


	red[0].Maneuver(burn);
	
	TimeSpan preDeployWaitTime = TimeSpan.FromDays(0.1);
	TimeSpan rendezvousTime = TimeSpan.FromDays(0.3);
	TimeSpan killOperationTime = TimeSpan.FromDays(0.2);
	
	futureEpoch = blue[0].Epoch + preDeployWaitTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	// Deploy inspector from Red 1
	red.Count += 1;
	Alias deployableSat = red[red.Count - 1];
	deployableSat.BodyScale = 200;
	deployableSat.DisplayName = "RedSat" + red.Count.ToString();
	deployableSat.Color = colorRed4;
	deployableSat.TailLength = radialViewTailLength/4;
	radialView.SetShowName(deployableSat.ObjectId, 1);
	radialView.SetObjectLabelFont(deployableSat.ObjectId, vf);
	
	deployableSat.Epoch = red[0].Epoch;
	deployableSat.SetCartesianState(red[0].GetCartesianState());

//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = {0, 0, 0};
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		opt.AddConstraintBlock(3, "relativePos", 0, 0);
		
		opt.SaveObjectToProcess(deployableSat);
		opt.SaveObjectToProcess(blue[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			deployableSat.Maneuver(burn);
			
			futureEpoch = blue[0].Epoch + rendezvousTime;
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				deployableSat.StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, deployableSat, blue[0].Position - deployableSat.Position);
			opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
			
			opt.Minimize(burn.BurnDirection.Norm);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		Report burn.BurnDirection;
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn3.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION
	
	Call OpenForRead("SavedValues/DisableScript_Red1Burn3.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();
	
	deployableSat.Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + rendezvousTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	deployableSat.SetCartesianState(blue[0].GetCartesianState());
	
	futureEpoch = blue[0].Epoch + killOperationTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	// Inspector return to Red 1
	
//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = {0, 0, 0};
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		opt.AddConstraintBlock(3, "relativePos", 0, 0);
		
		opt.SaveObjectToProcess(deployableSat);
		opt.SaveObjectToProcess(red[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			deployableSat.Maneuver(burn);
			
			futureEpoch = red[0].Epoch + rendezvousTime;
			WhileStepping red[0] to (red[0].Epoch == futureEpoch);
				deployableSat.StepToEpoch(red[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, deployableSat, red[0].Position - deployableSat.Position);
			opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
			
			opt.Minimize(burn.BurnDirection.Norm);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn4.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION
	
	Call OpenForRead("SavedValues/DisableScript_Red1Burn4.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();
	
	deployableSat.Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + rendezvousTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	red.Count -= 1;
	
	futureEpoch = blue[0].Epoch + preDeployWaitTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv1_", 0.001, -0.5, 0.5);
		opt.AddStateVariableBlock(3, "dv2_", 0.001, -0.5, 0.5);
		
		opt.AddConstraint("A", 42164, 42164, 1e1);
		opt.AddConstraint("E", 0, 1e-4);
		opt.AddConstraint("I", 0, 2, 1);
		opt.AddConstraint("lon", 277.2, 277.3, 1, 360);
		
		opt.SaveObjectToProcess(red[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			
			burn.BurnDirection[0] = opt.GetStateVariableValue("dv1_1");
			burn.BurnDirection[1] = opt.GetStateVariableValue("dv1_2");
			burn.BurnDirection[2] = opt.GetStateVariableValue("dv1_3");
			red[0].Maneuver(burn);
			totalDV = burn.BurnDirection.Norm;
			
			futureEpoch = red[0].Epoch + TimeSpan.FromDays(7);
			WhileStepping red[0] to (red[0].Epoch == futureEpoch);
			End;
			
			burn.BurnDirection[0] = opt.GetStateVariableValue("dv2_1");
			burn.BurnDirection[1] = opt.GetStateVariableValue("dv2_2");
			burn.BurnDirection[2] = opt.GetStateVariableValue("dv2_3");
			red[0].Maneuver(burn);
			totalDV += burn.BurnDirection.Norm;
			
			kepState = red[0].GetKeplerianState();
			
			opt.SetConstraintValue("A", red[0].A);
			opt.SetConstraintValue("E", red[0].E);
			opt.SetConstraintValue("I", red[0].I);
			opt.SetConstraintValue("lon", red[0].Longitude);
			
			opt.Minimize(totalDV*1e-1);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues()[0:2];
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn5.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION
	
	Call OpenForRead("SavedValues/DisableScript_Red1Burn5.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();
	
	red[0].Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
EndProcedure;

Call DisableScript(red, blue);
]]></FreeFormScript>
      </FreeForm>
    </ProjectCommands>
  </ProjectMissionSequence>
  <ProjectScript><![CDATA[
// Define Procedure ComputeAheadTrack

Define Procedure ComputeAheadTrack(Spacecraft primarySC, Spacecraft secondarySC, TimeSpan predictionDuration, GraphicsOverlay go, Variable justEraseOverlay);

	// This Procedure populates a GraphicsOverlay with an "ahead track" that visualizes where the secondary Spacecraft
	// will travel with respect to the primary Spacecraft. This Procedure uses the RelativeMotionUtilities.ComputeStateHCW
	// method to efficiently compute where the secondary will be using the HCW equations of motion.
	
	Variable i;
	
	Array futureStatePrimaryBodyFixed[3];
	
	Matrix futureStateMJ2000 = Matrix.Empty;
	futureStateMJ2000.ColumnCount = 3;
	
	TimeSpan currentStep = TimeSpan.Zero();
	
	// Reset the GraphicsOverlay
	go.ClearOverlayElements();
	
	If (justEraseOverlay);
		ExitProcedure;
	End;
	
	Save primarySC;
	Save secondarySC;
	primarySC.Propagator.StepSize = TimeSpan.FromSeconds(300);
	
//	// Compute the future path of the secondary with respect to the primary using the HCW equations of motion
//	While (currentStep < predictionDuration);
//		
//		currentStep += primarySC.Propagator.StepSize;
//		
//		futureStateMJ2000.RowCount += 1;
//		futureStateMJ2000.ColumnCount = 3;
//		
//		futureStateMJ2000[futureStateMJ2000.RowCount-1, :] = [RelativeMotionUtilities.ComputeStateHCW(secondarySC, primarySC, currentStep, 0)[0:2]];
//		
//	End;
//	
//	// Add points to the GraphicsOverlay in the primary Spacecraft's body fixed frame
//	For i = 0 to futureStateMJ2000.RowCount-1;
//		
//		Step primarySC;
//		
//		futureStatePrimaryBodyFixed = AttitudeConvert(0, 3, primarySC, futureStateMJ2000[i,:].ToArrayRowMajor());
//		
//		go.AddOverlayElement(futureStatePrimaryBodyFixed[0], futureStatePrimaryBodyFixed[1], futureStatePrimaryBodyFixed[2]);
//		
//	End;
	
	// Compute the future path of the secondary with respect to the primary using the HCW equations of motion
	TimeSpan epochToStepTo = primarySC.Epoch + predictionDuration;
	WhileStepping primarySC to (primarySC.Epoch == epochToStepTo);
		secondarySC.StepToEpoch(primarySC.Epoch);
		
		futureStatePrimaryBodyFixed = AttitudeConvert(0, 3, primarySC, secondarySC.Position - primarySC.Position);
		
		go.AddOverlayElement(futureStatePrimaryBodyFixed[0], futureStatePrimaryBodyFixed[1], futureStatePrimaryBodyFixed[2]);
		
	End;

	
	Restore primarySC;
	Restore secondarySC;
	
EndProcedure;

Global TimeSpan simStepSize = TimeSpan.FromSeconds(300);

Global Variable colorRed1 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.5);
Global Variable colorRed2 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.75);
Global Variable colorRed3 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.25);
Global Variable colorRed4 = ColorTools.InterpolateColorHSV({ColorTools.White, ColorTools.Red, ColorTools.Black}, 0.1);
Global Variable colorBlue1 = ColorTools.DodgerBlue;

Global Variable radialViewTailLength = 3e2 * 300 / simStepSize.ToSeconds();

Global Variable doOptimizationAndSaveValues = 0;

Formation red;
Formation blue;

red.Count = 3;
blue.Count = 1;

red.ViewAsGroup = 0;
blue.ViewAsGroup = 0;


Global GraphicsOverlay overlayRed1Future;
overlayRed1Future.SetReferenceObject(blue[0].ObjectId);
overlayRed1Future.DefaultColor = ColorTools.LightGray;

Global GraphicsOverlay overlayRed2Future;
overlayRed2Future.SetReferenceObject(blue[0].ObjectId);
overlayRed2Future.DefaultColor = ColorTools.LightGray;

Global GraphicsOverlay overlayRed3Future;
overlayRed3Future.SetReferenceObject(blue[0].ObjectId);
overlayRed3Future.DefaultColor = ColorTools.LightGray;

Global TimeSpan aheadPredictTime = TimeSpan.FromHours(12);
Global TimeSpan aheadPredictUpdateInterval = TimeSpan.FromSeconds(300);
Global Constant Variable aheadPredictRangeUpdateLimit = 300;


Global ViewWindow radialView;
radialView.CurrentViewpoint.ThreeDView.Radius = 2147.54485002776;
radialView.CurrentViewpoint.ThreeDView.RightAscension = 270;
radialView.CurrentViewpoint.ThreeDView.Declination = 0;
radialView.AddObject(red);
radialView.AddObject(blue);
radialView.AddObject(overlayRed1Future);
radialView.AddObject(overlayRed2Future);
radialView.AddObject(overlayRed3Future);
radialView.CurrentViewpoint.ThreeDView.Source = blue[0].ObjectId;
radialView.CurrentViewpoint.ThreeDView.Target = blue[0].ObjectId;

Global TimeSpan simStartEpoch = TimeTools.ParseCalendarDate("Jun 09 2025 15:00:00.000", "TAI", "TAI", "MJD GSFC");

Global ImpulsiveBurn burn;
burn.AttitudeSystem = 6;


Global FileInterface file;


Define Procedure OpenForRead(String filename);
	file.Filename = filename;
	file.ReadMode = 1;
	file.WriteMode = 0;
	file.Open();
EndProcedure;

Define Procedure OpenForWrite(String filename);
	file.Filename = filename;
	file.ReadMode = 0;
	file.WriteMode = 1;
	file.Open();
EndProcedure;

Global ViewFont vf;
vf.Size = 14;

// Set initial states
Variable baseRAAN = 40;
Variable baseI = 0.5;
blue[0].SetKeplerianState({42164,
                           1e-6,
                           baseI,
                           baseRAAN,
                           1,
                           1});
                           
blue[0].Epoch = simStartEpoch;
blue[0].Color = colorBlue1;
blue[0].BodyScale = 1000;
blue[0].DisplayName = "BlueSat";
blue[0].Propagator.StepSize = simStepSize;
blue[0].EulerAngles[1] = 90;
blue[0].TailLength = radialViewTailLength;
radialView.SetShowName(blue[0].ObjectId, 1);
radialView.SetObjectLabelFont(blue[0].ObjectId, vf);


Variable red1AngularSeparation = 2;
Variable red2AngularSeparation = 2.5;
Variable red2and3RadialSeparation = 60;
red[0].SetKeplerianState({42164,
                          1e-6,
                          baseI * 1.2,
                          baseRAAN - red1AngularSeparation,
                          1,
                          1});
red[1].SetKeplerianState({42164 - red2and3RadialSeparation,
                          1e-6,
                          baseI * 0.3,
                          baseRAAN - red2AngularSeparation * 1.7,
                          1,
                          1});
red[2].SetKeplerianState({42164 + red2and3RadialSeparation,
                          1e-6,
                          baseI * 0.3,
                          baseRAAN + red2AngularSeparation,
                          1,
                          1});
                          
red[0].Color = colorRed1;
red[1].Color = colorRed2;
red[2].Color = colorRed3;

Variable i;
For i = 0 to red.Count - 1;
	red[i].Epoch = simStartEpoch;
	red[i].BodyScale = 1000;
	red[i].DisplayName = "Red" + (i+1).ToString();
	red[i].TailLength = radialViewTailLength;
	radialView.SetShowName(red[i].ObjectId, 1);
	radialView.SetObjectLabelFont(red[i].ObjectId, vf);
End;


Global Array initialKepStateRed1 = red[0].GetKeplerianState();



Global Variable rangeB1_R1;
Global Variable rangeB1_R2;
Global Variable rangeB1_R3;
Global TimeSpan simEpoch;

Global PlotWindow pwRange({simEpoch, rangeB1_R1, rangeB1_R2, rangeB1_R3});
pwRange.SetBackgroundColorPalette("DarkGray");
pwRange.PlotTitle.Text = "Range to BlueSat";
pwRange.PlotSubTitle.Visible = 0;
pwRange.PointsToUpdate = 5 * 300 / simStepSize.ToSeconds();
pwRange.MaxPoints = 1e3 * 300 / simStepSize.ToSeconds();
pwRange.YAxis.MaximumValue = 1000;
pwRange.YAxis.MinimumValue = 0;
pwRange.YAxis.Title.Text = "Range";

pwRange.Series[0].Label = "Red1";
pwRange.Series[1].Label = "Red2";
pwRange.Series[2].Label = "Red3";

pwRange.Series[0].LineColor = colorRed1;
pwRange.Series[1].LineColor = colorRed2;
pwRange.Series[2].LineColor = colorRed3;

pwRange.Series[0].LineStyle = 0;
pwRange.Series[1].LineStyle = 0;
pwRange.Series[2].LineStyle = 0;

pwRange.Series[0].LineWidth = 2;
pwRange.Series[1].LineWidth = 2;
pwRange.Series[2].LineWidth = 2;


Global PlotScatterSeries radiusLongitudeB1;
Global PlotScatterSeries radiusLongitudeR1;
Global PlotScatterSeries radiusLongitudeR2;
Global PlotScatterSeries radiusLongitudeR3;

radiusLongitudeB1.Label = "BlueSat";
radiusLongitudeR1.Label = "Red1";
radiusLongitudeR2.Label = "Red2";
radiusLongitudeR3.Label = "Red3";

radiusLongitudeB1.LineColor = colorBlue1;
radiusLongitudeR1.LineColor = colorRed1;
radiusLongitudeR2.LineColor = colorRed2;
radiusLongitudeR3.LineColor = colorRed3;


Global PlotWindow pwRadiusLongitude;
pwRadiusLongitude.SetBackgroundColorPalette("DarkGray");
pwRadiusLongitude.PlotTitle.Text = "Longitude vs Radius";
pwRadiusLongitude.PlotSubTitle.Visible = 0;
pwRadiusLongitude.PointsToUpdate = 5 * 300 / simStepSize.ToSeconds();
pwRadiusLongitude.MaxPoints = 1e3 * 300 / simStepSize.ToSeconds();
pwRadiusLongitude.AddSeries(radiusLongitudeB1);
pwRadiusLongitude.AddSeries(radiusLongitudeR1);
pwRadiusLongitude.AddSeries(radiusLongitudeR2);
pwRadiusLongitude.AddSeries(radiusLongitudeR3);
pwRadiusLongitude.XAxis.MaximumValue = blue[0].Longitude + 3;
pwRadiusLongitude.XAxis.MinimumValue = blue[0].Longitude - 3;
pwRadiusLongitude.XAxis.Title.Text = "Longitude";
pwRadiusLongitude.YAxis.MaximumValue = 42250;
pwRadiusLongitude.YAxis.MinimumValue = 42050;
pwRadiusLongitude.YAxis.Title.Text = "Radius";

radiusLongitudeB1.LineStyle = 0;
radiusLongitudeR1.LineStyle = 0;
radiusLongitudeR2.LineStyle = 0;
radiusLongitudeR3.LineStyle = 0;

radiusLongitudeB1.LineWidth = 2;
radiusLongitudeR1.LineWidth = 2;
radiusLongitudeR2.LineWidth = 2;
radiusLongitudeR3.LineWidth = 2;

Call AddVerticalLine(
	pwRadiusLongitude,
	pwRadiusLongitude.XAxis.MinimumValue + (pwRadiusLongitude.XAxis.MaximumValue - pwRadiusLongitude.XAxis.MinimumValue) * 0.88,
	{pwRadiusLongitude.YAxis.MinimumValue + (pwRadiusLongitude.YAxis.MaximumValue - pwRadiusLongitude.YAxis.MinimumValue) * 0.17, pwRadiusLongitude.YAxis.MinimumValue},
	2,
	ColorTools.Green,
	0,
	"");
Call AddFloatingLabelToPlot(
	pwRadiusLongitude,
	pwRadiusLongitude.XAxis.MinimumValue + (pwRadiusLongitude.XAxis.MaximumValue - pwRadiusLongitude.XAxis.MinimumValue) * 0.88,
	pwRadiusLongitude.YAxis.MinimumValue + (pwRadiusLongitude.YAxis.MaximumValue - pwRadiusLongitude.YAxis.MinimumValue) * 0.15,
	ColorTools.Green,
	ColorTools.LightGray,
	"Candara",
	16,
	"To Earth");
Call AddSinglePointToPlot(
	pwRadiusLongitude,
	pwRadiusLongitude.XAxis.MinimumValue + (pwRadiusLongitude.XAxis.MaximumValue - pwRadiusLongitude.XAxis.MinimumValue) * 0.88,
	pwRadiusLongitude.YAxis.MinimumValue + 3,
	5,
	3,
	ColorTools.Green,
	"");






OutputLayout.SetWindowFrameVisibility({radialView.ID, pwRadiusLongitude.ID, pwRange.ID}, 0);
OutputLayout.SetWindowPosition(pwRadiusLongitude.ID, 1, 0, 1, 0);
OutputLayout.SetWindowSize(pwRadiusLongitude.ID, 1, 0.4, 1, 0.5);
OutputLayout.SetWindowPosition(pwRange.ID, 1, 0, 1, 0.5);
OutputLayout.SetWindowSize(pwRange.ID, 1, 0.4, 1, 0.5);
OutputLayout.SetWindowPosition(radialView.ID, 1, 0.4, 1, 0);
OutputLayout.SetWindowSize(radialView.ID, 1, 0.6, 1, 1);
OutputLayout.ApplyUpdates();


Define Procedure AdvanceSimToFutureEpoch(Formation red, Formation blue, TimeSpan futureEpoch);
	TimeSpan timeSinceAheadPredictUpdate = TimeSpan.Zero();
	
	WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
		red.StepToEpoch(blue[0].Epoch);
		simEpoch = blue[0].Epoch;
	
		rangeB1_R1 = blue[0].Range(red[0]);
		rangeB1_R2 = blue[0].Range(red[1]);
		rangeB1_R3 = blue[0].Range(red[2]);
		pwRange.Update();
		
		radiusLongitudeB1.AddPoints(blue[0].Longitude, blue[0].Radius);
		radiusLongitudeR1.AddPoints(red[0].Longitude, red[0].Radius);
		radiusLongitudeR2.AddPoints(red[1].Longitude, red[1].Radius);
		radiusLongitudeR3.AddPoints(red[2].Longitude, red[2].Radius);
		pwRadiusLongitude.Update();
		
		timeSinceAheadPredictUpdate += blue[0].Propagator.StepSize;
		If (timeSinceAheadPredictUpdate > aheadPredictUpdateInterval);
			Call ComputeAheadTrack(blue[0], red[0], aheadPredictTime, overlayRed1Future, rangeB1_R1 > aheadPredictRangeUpdateLimit);
			Call ComputeAheadTrack(blue[0], red[1], aheadPredictTime, overlayRed2Future, rangeB1_R2 > aheadPredictRangeUpdateLimit);
			Call ComputeAheadTrack(blue[0], red[2], aheadPredictTime, overlayRed3Future, rangeB1_R3 > aheadPredictRangeUpdateLimit);
			timeSinceAheadPredictUpdate = TimeSpan.Zero;
		End;
		
		
		radialView.Update();
	End;
EndProcedure;


Define Procedure BenignScript(Formation red, Formation blue);
	
	TimeSpan futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
EndProcedure;


Define Procedure ObservationScript(Formation red, Formation blue);
	
	TimeSpan futureEpoch = blue[0].Epoch + TimeSpan.FromDays(1);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	
	burn.BurnDirection = {    0.000145506,       -0.000805460,       -0.000000254};

//Block PRESOLVED OPTIMIZATION
//	Array relativePos;
//	Array desiredRelativePosLVC = {0, 20, 0};
//	Optimizer opt;
//	opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
//	opt.AddConstraintBlock(3, "relativePos", 0, 0);
//	
//	opt.SaveObjectToProcess(red[0]);
//	opt.SaveObjectToProcess(blue[0]);
//	
//	opt.LoadEngine();
//	While (opt.IsRunning());
//		opt.UpdateStateVariables();
//		opt.RestoreObjectsInProcess();
//		burn.BurnDirection = opt.GetStateVariableValues();
//		
//		red[0].Maneuver(burn);
//		
//		futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
//		WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
//			red[0].StepToEpoch(blue[0].Epoch);
//		End;
//		
//		relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//		relativePos[2] = desiredRelativePosLVC[2]; // we don't care about cross track so zero it out
//		opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
//		
//		opt.Minimize(burn.BurnDirection.Norm);
//		
//		If (opt.OptimizationPhase == 1);
//			Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
//		End;
//	End;
//	
//	Report opt.ReturnString;
//	opt.RestoreObjectsInProcess();
//	
//	burn.BurnDirection = opt.GetBestStateVariableValues();
//	Report burn.BurnDirection;
//EndBlock PRESOLVED OPTIMIZATION

	red[0].Maneuver(burn);

	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	
	burn.BurnDirection = {   -0.000636279,        0.000803921,        0.000397281};

//Block PRESOLVED OPTIMIZATION
//	Array relativePos;
//	Array desiredRelativePosLVC = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//	Variable relativeStateObjective;
//	Optimizer opt;
//	opt.MaximumNominalEvaluationCount = 800;
//	opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
//	
//	opt.SaveObjectToProcess(red[0]);
//	opt.SaveObjectToProcess(blue[0]);
//	
//	NloptOptions nlopt;
//	nlopt.AlgorithmToUse = 38;
//	nlopt.SubsidiaryAlgorithmToUse = 40;
//	
//	opt.LoadEngine(nlopt);
//	While (opt.IsRunning());
//		opt.UpdateStateVariables();
//		opt.RestoreObjectsInProcess();
//		burn.BurnDirection = opt.GetStateVariableValues();
//		
//		red[0].Maneuver(burn);
//		
//		futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
//		WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
//			red[0].StepToEpoch(blue[0].Epoch);
//		End;
//		
//		relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//		relativeStateObjective = (-desiredRelativePosLVC - relativePos).Norm;
//		
//		futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
//		WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
//			red[0].StepToEpoch(blue[0].Epoch);
//		End;
//		
//		relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
//		relativeStateObjective += (desiredRelativePosLVC - relativePos).Norm;
//		
//		opt.Minimize(burn.BurnDirection.Norm * 1e3 + relativeStateObjective*1e0);
//		
//		If (opt.OptimizationPhase == 1);
//			Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
//		End;
//	End;
//	
//	Report opt.ReturnString;
//	opt.RestoreObjectsInProcess();
//	
//	burn.BurnDirection = opt.GetBestStateVariableValues();
//	Report burn.BurnDirection;
//EndBlock PRESOLVED OPTIMIZATION
	
	red[0].Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(1);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	burn.BurnDirection = -{    0.000145506,       -0.000805460,       -0.000000254};
	red[0].Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
EndProcedure;


Define Procedure DisableScript(Formation red, Formation blue);
	
	Array relativePos;
	Array desiredRelativePosLVC;
	Optimizer opt;
	Variable relativeStateObjective;
	NloptOptions nlopt;
	Array kepState;
	Variable totalDV;
	
	TimeSpan futureEpoch = blue[0].Epoch + TimeSpan.FromDays(1);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = {0, 4, 0};
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		opt.AddConstraintBlock(3, "relativePos", 0, 0);
		
		opt.SaveObjectToProcess(red[0]);
		opt.SaveObjectToProcess(blue[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			red[0].Maneuver(burn);
			
			futureEpoch = blue[0].Epoch + TimeSpan.FromDays(4);
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				red[0].StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
			relativePos[2] = desiredRelativePosLVC[2]; // we don't care about cross track so zero it out
			opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
			
			opt.Minimize(burn.BurnDirection.Norm);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn1.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION

	Call OpenForRead("SavedValues/DisableScript_Red1Burn1.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();

	red[0].Maneuver(burn);

	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(4);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);

//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
		
		opt.Reset(1);
		opt.MaximumNominalEvaluationCount = 800;
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		
		opt.SaveObjectToProcess(red[0]);
		opt.SaveObjectToProcess(blue[0]);
		
		nlopt.AlgorithmToUse = 38;
		nlopt.SubsidiaryAlgorithmToUse = 40;
		
		opt.LoadEngine(nlopt);
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			red[0].Maneuver(burn);
			
			futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				red[0].StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
			relativeStateObjective = (-desiredRelativePosLVC - relativePos).Norm;
			
			futureEpoch = blue[0].Epoch + TimeSpan.FromDays(0.5);
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				red[0].StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, red[0], blue[0].Position - red[0].Position);
			relativeStateObjective += (desiredRelativePosLVC - relativePos).Norm;
			
			opt.Minimize(burn.BurnDirection.Norm * 1e3 + relativeStateObjective*1e0);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn2.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;

//EndBlock PRESOLVED OPTIMIZATION

	Call OpenForRead("SavedValues/DisableScript_Red1Burn2.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();


	red[0].Maneuver(burn);
	
	TimeSpan preDeployWaitTime = TimeSpan.FromDays(0.1);
	TimeSpan rendezvousTime = TimeSpan.FromDays(0.3);
	TimeSpan killOperationTime = TimeSpan.FromDays(0.2);
	
	futureEpoch = blue[0].Epoch + preDeployWaitTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	// Deploy inspector from Red 1
	red.Count += 1;
	Alias deployableSat = red[red.Count - 1];
	deployableSat.BodyScale = 200;
	deployableSat.DisplayName = "RedSat" + red.Count.ToString();
	deployableSat.Color = colorRed4;
	deployableSat.TailLength = radialViewTailLength/4;
	radialView.SetShowName(deployableSat.ObjectId, 1);
	radialView.SetObjectLabelFont(deployableSat.ObjectId, vf);
	
	deployableSat.Epoch = red[0].Epoch;
	deployableSat.SetCartesianState(red[0].GetCartesianState());

//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = {0, 0, 0};
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		opt.AddConstraintBlock(3, "relativePos", 0, 0);
		
		opt.SaveObjectToProcess(deployableSat);
		opt.SaveObjectToProcess(blue[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			deployableSat.Maneuver(burn);
			
			futureEpoch = blue[0].Epoch + rendezvousTime;
			WhileStepping blue[0] to (blue[0].Epoch == futureEpoch);
				deployableSat.StepToEpoch(blue[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, deployableSat, blue[0].Position - deployableSat.Position);
			opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
			
			opt.Minimize(burn.BurnDirection.Norm);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		Report burn.BurnDirection;
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn3.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION
	
	Call OpenForRead("SavedValues/DisableScript_Red1Burn3.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();
	
	deployableSat.Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + rendezvousTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	deployableSat.SetCartesianState(blue[0].GetCartesianState());
	
	futureEpoch = blue[0].Epoch + killOperationTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	// Inspector return to Red 1
	
//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		desiredRelativePosLVC = {0, 0, 0};
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv", 0.001, -0.5, 0.5);
		opt.AddConstraintBlock(3, "relativePos", 0, 0);
		
		opt.SaveObjectToProcess(deployableSat);
		opt.SaveObjectToProcess(red[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			burn.BurnDirection = opt.GetStateVariableValues();
			
			deployableSat.Maneuver(burn);
			
			futureEpoch = red[0].Epoch + rendezvousTime;
			WhileStepping red[0] to (red[0].Epoch == futureEpoch);
				deployableSat.StepToEpoch(red[0].Epoch);
			End;
			
			relativePos = RelativeMotionUtilities.ConvertRelativePosition(0, 6, deployableSat, red[0].Position - deployableSat.Position);
			opt.SetConstraintValues(desiredRelativePosLVC - relativePos);
			
			opt.Minimize(burn.BurnDirection.Norm);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues();
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn4.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION
	
	Call OpenForRead("SavedValues/DisableScript_Red1Burn4.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();
	
	deployableSat.Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + rendezvousTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
	red.Count -= 1;
	
	futureEpoch = blue[0].Epoch + preDeployWaitTime;
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
//Block PRESOLVED OPTIMIZATION
	If (doOptimizationAndSaveValues);
		
		opt.Reset(1);
		opt.AddStateVariableBlock(3, "dv1_", 0.001, -0.5, 0.5);
		opt.AddStateVariableBlock(3, "dv2_", 0.001, -0.5, 0.5);
		
		opt.AddConstraint("A", 42164, 42164, 1e1);
		opt.AddConstraint("E", 0, 1e-4);
		opt.AddConstraint("I", 0, 2, 1);
		opt.AddConstraint("lon", 277.2, 277.3, 1, 360);
		
		opt.SaveObjectToProcess(red[0]);
		
		opt.LoadEngine();
		While (opt.IsRunning());
			opt.UpdateStateVariables();
			opt.RestoreObjectsInProcess();
			
			burn.BurnDirection[0] = opt.GetStateVariableValue("dv1_1");
			burn.BurnDirection[1] = opt.GetStateVariableValue("dv1_2");
			burn.BurnDirection[2] = opt.GetStateVariableValue("dv1_3");
			red[0].Maneuver(burn);
			totalDV = burn.BurnDirection.Norm;
			
			futureEpoch = red[0].Epoch + TimeSpan.FromDays(7);
			WhileStepping red[0] to (red[0].Epoch == futureEpoch);
			End;
			
			burn.BurnDirection[0] = opt.GetStateVariableValue("dv2_1");
			burn.BurnDirection[1] = opt.GetStateVariableValue("dv2_2");
			burn.BurnDirection[2] = opt.GetStateVariableValue("dv2_3");
			red[0].Maneuver(burn);
			totalDV += burn.BurnDirection.Norm;
			
			kepState = red[0].GetKeplerianState();
			
			opt.SetConstraintValue("A", red[0].A);
			opt.SetConstraintValue("E", red[0].E);
			opt.SetConstraintValue("I", red[0].I);
			opt.SetConstraintValue("lon", red[0].Longitude);
			
			opt.Minimize(totalDV*1e-1);
			
			If (opt.OptimizationPhase == 1);
				Report opt.NominalEvaluationCount, opt.ObjectiveFunctionValue, opt.MaximumInfeasibility, opt.MaximumInfeasibilitySource;
			End;
		End;
		
		Report opt.ReturnString;
		opt.RestoreObjectsInProcess();
		
		burn.BurnDirection = opt.GetBestStateVariableValues()[0:2];
		
		Call OpenForWrite("SavedValues/DisableScript_Red1Burn5.txt");
		file.PutLine(burn.BurnDirection[0].ToString());
		file.PutLine(burn.BurnDirection[1].ToString());
		file.PutLine(burn.BurnDirection[2].ToString());
		file.Close();
	End;
//EndBlock PRESOLVED OPTIMIZATION
	
	Call OpenForRead("SavedValues/DisableScript_Red1Burn5.txt");
	burn.BurnDirection[0] = file.GetLine().ToVariable();
	burn.BurnDirection[1] = file.GetLine().ToVariable();
	burn.BurnDirection[2] = file.GetLine().ToVariable();
	file.Close();
	
	red[0].Maneuver(burn);
	
	futureEpoch = blue[0].Epoch + TimeSpan.FromDays(7);
	Call AdvanceSimToFutureEpoch(red, blue, futureEpoch);
	
EndProcedure;

Call DisableScript(red, blue);
]]></ProjectScript>
  <ProjectNotes></ProjectNotes>
</FreeFlyerProjectFile>